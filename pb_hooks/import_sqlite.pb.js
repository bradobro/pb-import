$app.rootCmd.addCommand(new Command({
    use: "import_sqlite",
    run: (cmd, args) => {
        // console.log("cmd: ", JSON.stringify(cmd))
        // console.log("args: ", JSON.stringify(args))
        if (args.length < 1) {
            console.log("Usage: pocketbase import_sqlite <externalDB> [table_list]")
            console.log("Example: pocketbase import_sqlite /Users/Shared/externalDB.sqlite")
            console.log("Example: pocketbase import_sqlite /Users/Shared/externalDB.sqlite \"'table1','table2'\"")
            return;
        }
        const externalDB = args[0]
        const table_list = args[1]
        const result = arrayOf(new DynamicModel({
            "tbl_name":    "",
        }))
        let sql = `attach "${externalDB}" as exdb;select tbl_name from exdb.sqlite_master where type='table'`
        if (table_list) {
            sql += ` and tbl_name in (${table_list})`
        }
        $app.dao().db()
            .newQuery(sql)
            .all(result)
            
        const convertTable = async (tbl_name) => {
            console.log('*********************')
            console.log(`*** ${tbl_name}`)
            console.log('*********************')
            let collection;
            let fieldlist = '';
            let fieldimportlist = '';
            // get columns for this table
            try {
                const columns = arrayOf(new DynamicModel({
                    "cid":      0,
                    "name":       "",
                    "type":       "",
                    "notnull":    0,
                    "dflt_value": [],
                    "pk":         0,
                }))
                let SQL = `pragma exdb.table_info('${tbl_name}')`
                $app.dao().db()
                    .newQuery(SQL)
                    .all(columns)
                collection = new Collection({
                    // the id is autogenerated, but you can set a specific one if you want to
                    // id:      "...",
                    name:       tbl_name,
                    type:       "base",
                    listRule:   null,
                    viewRule:   null,
                    createRule: null,
                    updateRule: null,
                    deleteRule: null,
                    schema:     []//fields,
                    // indexes: [
                    //     "CREATE UNIQUE INDEX idx_user ON example (user)"
                    // ],
                    // options: {}
                })
                // loop through the columns here
                for (let i = 0; i < columns.length; i++) {
                    /*
                        "name": "code",
                        "type": "SMALLINT",
                        "notnull": 0,
                        "dflt_value": [],
                        "pk": 0,
                        "cid": 0
                    */
                    const column = columns[i]
                    // convert any int types to "number" and char types to "text"
                    if (column.type.toLowerCase().indexOf("int") >= 0) column.type = "number"
                    if (column.type.toLowerCase().indexOf("char") >= 0) column.type = "text"

                    // add new field
                    const name = column.name.toLowerCase();
                    const type = column.type.toLowerCase();
                    if (i > 0) fieldlist += ','
                    if (i > 0) fieldimportlist += ','
                    fieldlist += name
                    if (type == 'numeric') fieldimportlist += `coalesce(${name},-1)`
                    else fieldimportlist += `coalesce(${name},'')`
                    collection.schema.addField(new SchemaField({
                        name,
                        type,
                    }))
                
                }
                console.log(`creating collection ${tbl_name}...`)
                $app.dao().saveCollection(collection)
            } catch (e) {
                console.log('create error: ', e)
            }
            try {
                // import the data
                console.log(`importing data for ${tbl_name}...`)
                const SQL = `insert into ${tbl_name} (${fieldlist}) select ${fieldimportlist} from exdb.${tbl_name}`
                $app.dao().db()
                    .newQuery(SQL)
                    .execute()
            } catch (e) {
                console.log('data import error: ', e)
            }
        }
        for (let i = 0; i < result.length; i++) {
            const tbl_name = result[i].tbl_name
            convertTable(tbl_name)
        }
        console.log(`done importing ${result.length} tables in ${externalDB}`)
    },
}))